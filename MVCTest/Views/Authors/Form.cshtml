@model MVCTest.ViewModels.AuthorViewModel
@using MVCTest.Extensions;
@{
    var isCreating = Model.Id == 0;
    ViewBag.Title = isCreating ? "Create" : "Edit";
    
}
<div data-bind="visible: !saveCompleted()">
    <div class="col-md-offset-2 col-md-6">
        <h2>@ViewBag.Title</h2>
        <form action="/Authors/Create" method="post" novalidate="novalidate" data-bind="submit: validateAndSave">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <fieldset>
                <legend>Author</legend>

                <pre data-bind="text:ko.toJSON($data,null,2)"></pre>
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    @*@Html.EditorFor(model => model.Name)*@
                    <input type="text" id="Name" name="Name" class="form-control" data-val="true" data-bind="value:author.name" />
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label" })
                    @*@Html.EditorFor(model => model.Publisher)*@
                    <input type="text" id="Publisher" name="Publiser" class="form-control" data-bind="value:author.publisher"/>
                    @Html.ValidationMessageFor(model => model.Publisher, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <input type="submit" class="btn btn-default" value="
                        @if (isCreating) { @Html.Raw("Create"); }
                        else { @Html.Raw("Update"); }"
                         data-bind="visible: !sending()" />
                </div>
            </fieldset>
        </form>
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("/Scripts/ViewModel/AuthorViewModel.js")
    <script>
        var viewModel = new AuthorViewModel(@Html.HtmlConvertToJson(Model));
        ko.applyBindings(viewModel);

        $(':text').addClass('form-control');
        //$('#Name').attr('data-bind', 'value:name');
        //$('#Publisher').attr('data-bind', 'value:publisher');
    </script>
}
